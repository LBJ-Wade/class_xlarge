*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
*  CLASS input parameter file  *
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*

> This example of input file, intended for CLASS beginners, lists all possibilities with detailed comments.
> You can use a more concise version, in which only the arguments in which you are interested would appear.
> Only lines containing an equal sign not preceded by a sharp sign "#" are considered by the code. Hence, do not write an equal sign within a comment, the whole line would be interpreted as relevant input.
> Input files must have an extension ".ini".

----------------------------
----> background parameters:
----------------------------

1) Hubble parameter : either 'H0' in km/s/Mpc or 'h' or '100*theta_s' where the latter is the peak scale parameter 100(ds_dec/da_dec) close to 1.04 (default: 'h' set to 0.704)

#H0 = 72.
h =0.67

2) photon density: either 'T_cmb' in K or 'Omega_g' or 'omega_g' (default: 'T_cmb' set to 2.726)

T_cmb = 2.725
#Omega_g = 5.050601e-05
#omega_g = 2.47479449e-5

3) baryon density: either 'Omega_b' or 'omega_b' (default: 'omega_b' set to 0.02253)

Omega_b = 0.049
#omega_b = 0.0266691

4) ultra-relativistic species / massless neutrino density: either 'N_ur' or 'Omega_ur' or 'omega_ur' (default: 'N_ur' set to 3.046) (note: instead of 'N_ur' you can pass equivalently 'N_eff', although this syntax is deprecated)

N_ur = 3.046
#Omega_ur = 3.4869665e-05
#omega_ur = 1.70861334e-5

5) density of cdm (cold dark matter): 'Omega_cdm' or 'omega_cdm' (default: 'omega_cdm' set to 0.1122)

Omega_cdm = 0.266
#omega_cdm = 0.110616

7) curvature: 'Omega_k' (default: 'Omega_k' set to 0)

Omega_k = 0.

8) cosmological constant / fluid with constant w and sound speed (can be used to model simple dark energy models): enter one parameter out of 'Omega_Lambda' or 'Omega_fld', the other one is inferred by the code in such way that (sum_i Omega_i) equals (1 + Omega_k) (default: 'Omega_fld' set to 0 and 'Omega_Lambda' to (1+Omega_k-Omega_tot))

# Omega_Lambda = 0.7
#Omega_fld = 0

9) equation of state parameter (p/rho equal to w0+wa(1-a/a0) ) and sound speed of the fluid (this is the sound speed defined in the frame comoving with the fluid, i.e. obeying to the most sensible physical definition)

#w0_fld = -1
#wa_fld = 0.
#cs2_fld = 1

#NEW: just write fNL here
10) Primordial non-Gaussianity parameter fNL. Introduced in the calculation of the number counts Cls.
f_NL = -2.2

#NEW: this number will multiply all the GR terms (rsd2, rsd3, gr1, gr2, gr3, gr4, gr5)
11) GR effects parameter. Should be set to 1 unless constraints on it are required
gr_epsilon = 1.0


--------------------------------
----> thermodynamics parameters:
--------------------------------

1) primordial Helium fraction 'YHe', e.g. 0.25; if set to 'BBN' or 'bbn', will be inferred from Big Bang Nucleosynthesis (default: set to 'BBN')

YHe = BBN

2) 'recombination' algorithm set to 'RECFAST' or 'HyRec'

recombination = RECFAST

2) parametrization of reionization: 'reio_parametrization' must be one of 'reio_none' (no reionization), 'reio_camb' (like CAMB: one tanh() step for hydrogen reionization one for second helium reionization), 'reio_bins_tanh' (binned history x_e(z) with tanh() interpolation between input values), 'reio_half_tanh' (like 'reio_camb' excepted that we match the function xe(z) from recombination with only half a tanh(z-z_reio))... (default: set to 'reio_camb')

reio_parametrization = reio_camb

3.a.) if 'reio_parametrization' set to 'reio_camb' or 'reio_half_tanh': enter one of 'z_reio' or 'tau_reio' (default: 'z_reio' set to 10.3), plus 'reionization_exponent', 'reionization_width', 'helium_fullreio_redshift', 'helium_fullreio_width' (default: set to 1.5, 1.5, 3.5, 0.5)

#z_reio = 10.
tau_reio = 0.09

reionization_exponent = 1.5
reionization_width = 1.5
helium_fullreio_redshift = 3.5
helium_fullreio_width = 0.5

----------------------------------------------------
----> define which perturbations should be computed:
----------------------------------------------------

1.a) list of output spectra requested:
- 'tCl' for temperature Cls,
- 'pCl' for polarization Cls,
- 'lCl' for CMB lensing potential Cls,
- 'nCl' (or 'dCl') for density number count Cls,
- 'sCl' for galaxy lensing potential Cls,
- 'mPk' for total matter power spectrum P(k) infered from gravitational potential,
- 'dTk' (or 'mTk') for density transfer functions for each species,
- 'vTk' for velocity transfer function for each species.
By defaut, the code will try to compute the following cross-correlation Cls (if available): temperature-polarisation, temperature-CMB lensing, polarization-CMB lensing, and density-lensing. Other cross-correlations are not computed because they would slow down the code considerably.
Can be left blank if you do not want to evolve cosmological perturbations at all. (default: set to blanck, no perturbation calculation)

output = nCl

#NEW: all the 10 terms can be specified here (density, rsd1(kaiser), rs2, rs3(GR), lensing, gr1, gr2, gr3, gr4, gr5
1.d) if you included 'nCl' (or 'dCl') in the list, you can take into account only some of the terms contributing to the obsevable number count fluctuation spectrum: matter density ('density'), redshift-space and Doppler distortions ('rsd1,rs2,rsd3'), lensing ('lensing'), or gravitational potential terms ('gr1,gr2,gr3,gr4,gr5'). Put below the list of terms to be included (defaut: if this field is not passed, only 'dens' will be included)
number count contributions = density, rsd1, rsd2, rsd3, lensing, gr1, gr2, gr3, gr4, gr5

4) list of modes ('s' for scalars, 'v' for vectors, 't' for tensors). More than one letter allowed, can be attached or separated by arbitrary characters; letters can be small or capital. (default: set to 's')

modes = s

7) list of initial conditions for scalars ('ad' for adiabatic, 'bi' for baryon isocurvature, 'cdi' for CDM isocurvature, 'nid' for neutrino density isocurvature, 'niv' for neutrino velocity isocurvature). More than one of these allowed, can be attached or separated by arbitrary characters; letters can be small or capital. (default: set to 'ad')

ic = ad

8) gauge in which calculations are performed: 'sync' or 'synchronous' or 'Synchronous' for synchronous, 'new' or 'newtonian' or 'Newtonian' for Newtonian/longitudinal gauge (default: set to synchronous)

gauge = synchronous

---------------------------------------------
----> define primordial perturbation spectra:
---------------------------------------------

1) primordial spectrum type ('analytic_Pk' for an analytic smooth function with amplitude, tilt, running, etc.; analytic spectra with feature can also be added as a new type;'inflation_V' for a numerical computation of the inflationary primordial spectrum, through a full integration of the perturbation equation, given a parametrization of the potential V(phi), like in astro-ph/0703625; there is also an option 'two scales' in order to specify two amplitudes instead of one amplitude and one tilt, like in the isocurvature mode analysis of the Planck inflation paper (works also for adiabatic mode only; see details below, item 2.c); finally 'external_Pk' allows for the primordial spectrum to be computed externally by some piece of code, or to be read from a table, see 2.d). (default: set to 'analytic_Pk')

P_k_ini type = analytic_Pk

2) parameters related to one of the primordial spectrum types (will only be read if they correspond to the type selected above)

2.a) for type 'analytic_Pk':

2.a.1) pivot scale in Mpc-1 (default: set to 0.002)

k_pivot = 0.005

2.a.2) scalar adiabatic perturbations: curvature power spectrum value at pivot scale, tilt at the same scale, and tilt running (default: set 'A_s' to 2.42e-9, 'n_s' to 0.967, 'alpha_s' to 0)

A_s = 2.46E-9
n_s = 0.96
alpha_s = 0.


-------------------------------------
----> define format of final spectra:
-------------------------------------

1) maximum l for CLs:
- 'l_max_scalars' for CMB scalars (temperature, polarization, cmb lensing potential),
- 'l_max_tensors' for CMB tensors (temperature, polarization)
- 'l_max_lss'     for Large Scale Structure Cls (density, galaxy lensing potential)
Reducing 'l_max_lss' with respect to l_max_scalars reduces the execution time significantly
(default: set 'l_max_scalars' to 2500, 'l_max_tensors' to 500, 'l_max_lss' to 300)

l_max_scalars = 2500
l_max_tensors = 500
l_max_lss = 500

6) parameters for the the matter density number count (option 'nCl' (or 'dCl')) or galaxy lensing potential (option 'sCl') Cls:

#NEW: write the bins in a file with the following format: two columns 1-> mean redshift, 2-> half redshift width. Write this file name in the variable selection_bins below.
6a) enter here a description of the selection functions W(z) of each redshift bin; selection can be set to 'gaussian', 'tophat' or 'dirac', then pass a list of N mean redshifts in growing order separated by comas, and 1 or N widths separated by comas. The width stands for one standard deviation of the gaussian (in z space), or for the half-width of the top-hat. Finally, non_diagonal sets the number of cross-correlation spectra that you want to calculate: 0 means only auto-correlation, 1 means only adjacent bins, and number of bins minus one means all correlations (default: set to 'gaussian',1,0.1,0)

selection= tophat
selection_bins = bins_test.txt
non_diagonal = 1

6b) It is possible to multiply the window function W(z) by a selection function 'dNdz' (number of objects per redshift interval). Type the name of the file containing the redshift in the first column and the number of objects in the second column (do not call it 'analytic*'). Set to 'analytic' to use instead the analytic expression from arXiv:1004.4640 (this function can be tuned in the module transfer.c, in the subroutine transfer_dNdz_analytic). Leave blank to use a uniform distribution (default).
dNdz_selection = nz_test.txt

#NEW: this has been deprecated. The evolution bias function (f_evo) is now provided in e_bias and
#e_bias_function below
6c) It is possible to consider source number counts evolution. Type the name of the file containing the redshift on the first column and the number of objects on the second column (do not call it 'analytic*'). Set to 'analytic' to use instead the analytic expression from Eq. 48 of arXiv:1105.5292. Leave blank to use constant comoving number densities (default).
dNdz_evolution = none

#NEW: A b(z) function can be provided through a file containing z in the first column and b(z)
#in the second one.
6d) mutiply the density by a constant 'bias' factor (default: 'bias' set to one)
bias = 1.5
bias_function = bias_test.txt

#NEW: A s(z) function can be provided through a file containing z in the first column and s(z)
#in the second one.
6e) consider a constant magnification bias factor (default: 's_bias' set to zero)
s_bias = 0.4
s_bias_function = s_bias_test.txt

#NEW: A f_evo(z) function can be provided through a file containing z in the first column and f_evo(z)
#in the second one.
6d) mutiply the density by a constant 'bias' factor (default: 'bias' set to one)
e_bias = 0.0
e_bias_function = e_bias_test.txt

7a) file name root 'root' for all output files (if Cl requested, written to '<root>cl.dat'; if P(k) requested, written to '<root>pk.dat'; plus similar files for scalars, tensors, pairs of initial conditions, etc.; if file with input parameters requested, written to '<root>parameters.ini') (default: the input module sets automatically 'root' to 'output/<thisfilename>N_', where N is the first available integer number, starting from 00, to avoid erasing the output of previous runs)
root = output

7b) do you want headers at the beginning of each output file (giving precisions on the output units/ format) ? If 'headers' set to something containing the letter 'y' or 'Y', headers written, otherwise not written (default: written)
headers = yes

7c) in all output files, do you want columns to be normalized and ordered with the default CLASS definitions or with the CAMB definitions (often idential to the CMBFAST one) ? Set 'format' to either 'class', 'CLASS', 'camb' or 'CAMB' (default: 'class')
format = class

7d) Do you want to write a table of background quantitites in a file? This will include H, densities, Omegas, various cosmological distances, sound horizon, etc., as a function of conformal time, proper time, scale factor. File created if 'write background'  set to something containing the letter 'y' or 'Y', file written, otherwise not written (default: not written)
write background = no

7e) Do you want to write a table of thermodynamics quantitites in a file? File is created if 'write thermodynamics' is set to something containing the letter 'y' or 'Y'. (default: not written)
write thermodynamics = no

7g) Do you want to write the primordial scalar(/tensor) spectrum in a file, with columns k [1/Mpc], P_s(k) [dimensionless], ( P_t(k) [dimensionless])? File created if 'write primordial'  set to something containing the letter 'y' or 'Y', file written, otherwise not written (default: not written)
write primordial = no

7h) Do you want to have all input/precision parameters which have been read written in file '<root>parameters.ini', and those not written in file '<root>unused_parameters' ? If 'write parameters' set to something containing the letter 'y' or 'Y', file written, otherwise not written (default: not written)
write parameters = yeap

7i) Do you want a warning written in the standard output when an input parameter or value could not be interpreted ? If 'write warnings' set to something containing the letter 'y' or 'Y', warnings written, otherwise not written (default: not written)
write warnings = y

----------------------------------------------------
----> amount of information sent to standard output:
----------------------------------------------------

Increase integer values to make each module more talkative (default: all set to 0)
input_verbose = 1
background_verbose = 1
thermodynamics_verbose = 1
perturbations_verbose = 2
transfer_verbose = 2
primordial_verbose = 1
spectra_verbose = 2
nonlinear_verbose = 1
lensing_verbose = 1
output_verbose = 1

----> precision parameters
# Limber approximation works bad especially for narrow z-bins for cross-correlations between bins
l_switch_limber_for_cl_density_over_z=10000.
# Reduce the bessel sampling to obtain faster and less memory requiring results
selection_sampling_bessel=2.
# For large redshift bin, larger k_step_trans_scalars values are still accurate (increase speed considerably)
k_step_trans_scalars=0.4
# Increase for good rCl_lensing accuracy at high l's
k_scalar_max_tau0_over_l_max= 2.
